package net.milosvasic.factory.connection

import net.milosvasic.factory.connection.impl.GCPOSLoginConnectionImpl
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.BeforeEach

/**
 * Unit tests for GCPOSLoginConnectionImpl.
 *
 * @author Mail Server Factory Team
 * @since 3.1.0
 */
class GCPOSLoginConnectionTest {

    private lateinit var config: ConnectionConfig

    @BeforeEach
    fun setUp() {
        config = ConnectionConfigBuilder()
            .type(ConnectionType.GCP_OS_LOGIN)
            .host("mail-instance")
            .port(22)
            .cloudConfig(CloudConfig(
                provider = CloudProvider.GCP,
                project = "mail-production-project",
                zone = "us-central1-a",
                instanceId = "mail-instance",
                properties = mapOf(
                    "serviceAccount" to "mail-admin@mail-production-project.iam.gserviceaccount.com"
                )
            ))
            .build()
    }

    @Test
    @DisplayName("Test GCP OS Login connection creation")
    fun testGCPOSLoginConnectionCreation() {
        val connection = GCPOSLoginConnectionImpl(config)
        assertNotNull(connection)
    }

    @Test
    @DisplayName("Test connection metadata")
    fun testConnectionMetadata() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals(ConnectionType.GCP_OS_LOGIN, metadata.type)
        assertEquals("mail-instance", metadata.host)
        assertEquals(22, metadata.port)
    }

    @Test
    @DisplayName("Test metadata shows GCP OS Login auth method")
    fun testMetadataShowsGCPOSLoginAuthMethod() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("GCP OS Login", metadata.properties["authMethod"])
    }

    @Test
    @DisplayName("Test metadata contains GCP project")
    fun testMetadataContainsGCPProject() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("mail-production-project", metadata.properties["project"])
    }

    @Test
    @DisplayName("Test metadata contains GCP zone")
    fun testMetadataContainsGCPZone() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("us-central1-a", metadata.properties["zone"])
    }

    @Test
    @DisplayName("Test metadata contains instance ID")
    fun testMetadataContainsInstanceId() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("mail-instance", metadata.properties["instanceId"])
    }

    @Test
    @DisplayName("Test metadata contains service account")
    fun testMetadataContainsServiceAccount() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("mail-admin@mail-production-project.iam.gserviceaccount.com",
            metadata.properties["serviceAccount"])
    }

    @Test
    @DisplayName("Test metadata contains cloud provider")
    fun testMetadataContainsCloudProvider() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("GCP", metadata.properties["cloudProvider"])
    }

    @Test
    @DisplayName("Test isConnected returns false before connection")
    fun testIsConnectedBeforeConnection() {
        val connection = GCPOSLoginConnectionImpl(config)
        assertFalse(connection.isConnected())
    }

    @Test
    @DisplayName("Test execute fails when not connected")
    fun testExecuteFailsWhenNotConnected() {
        val connection = GCPOSLoginConnectionImpl(config)
        val result = connection.execute("systemctl status postfix")

        assertFalse(result.success)
        assertTrue(result.errorOutput.contains("Not connected"))
    }

    @Test
    @DisplayName("Test upload fails when not connected")
    fun testUploadFailsWhenNotConnected() {
        val connection = GCPOSLoginConnectionImpl(config)
        val result = connection.uploadFile("/tmp/test.txt", "/tmp/remote.txt")

        assertFalse(result.success)
    }

    @Test
    @DisplayName("Test download fails when not connected")
    fun testDownloadFailsWhenNotConnected() {
        val connection = GCPOSLoginConnectionImpl(config)
        val result = connection.downloadFile("/tmp/remote.txt", "/tmp/local.txt")

        assertFalse(result.success)
    }

    @Test
    @DisplayName("Test health check when not connected")
    fun testHealthCheckWhenNotConnected() {
        val connection = GCPOSLoginConnectionImpl(config)
        val health = connection.getHealth()

        assertFalse(health.isHealthy)
    }

    @Test
    @DisplayName("Test config validation with valid GCP OS Login config")
    fun testConfigValidationWithValidGCPOSLoginConfig() {
        val connection = GCPOSLoginConnectionImpl(config)
        val result = connection.validateConfig()

        assertTrue(result.isValid())
    }

    @Test
    @DisplayName("Test config validation fails without project")
    fun testConfigValidationFailsWithoutProject() {
        val invalidConfig = ConnectionConfigBuilder()
            .type(ConnectionType.GCP_OS_LOGIN)
            .host("mail-instance")
            .port(22)
            .cloudConfig(CloudConfig(
                provider = CloudProvider.GCP,
                zone = "us-central1-a",
                instanceId = "mail-instance"
                // Missing project
            ))
            .build()

        val connection = GCPOSLoginConnectionImpl(invalidConfig)
        val result = connection.validateConfig()

        assertTrue(result.isFailed())
    }

    @Test
    @DisplayName("Test config validation fails without zone")
    fun testConfigValidationFailsWithoutZone() {
        val invalidConfig = ConnectionConfigBuilder()
            .type(ConnectionType.GCP_OS_LOGIN)
            .host("mail-instance")
            .port(22)
            .cloudConfig(CloudConfig(
                provider = CloudProvider.GCP,
                project = "mail-production-project",
                instanceId = "mail-instance"
                // Missing zone
            ))
            .build()

        val connection = GCPOSLoginConnectionImpl(invalidConfig)
        val result = connection.validateConfig()

        assertTrue(result.isFailed())
    }

    @Test
    @DisplayName("Test config validation fails without instance ID")
    fun testConfigValidationFailsWithoutInstanceId() {
        val invalidConfig = ConnectionConfigBuilder()
            .type(ConnectionType.GCP_OS_LOGIN)
            .host("mail-instance")
            .port(22)
            .cloudConfig(CloudConfig(
                provider = CloudProvider.GCP,
                project = "mail-production-project",
                zone = "us-central1-a"
                // Missing instanceId
            ))
            .build()

        val connection = GCPOSLoginConnectionImpl(invalidConfig)
        val result = connection.validateConfig()

        assertTrue(result.isFailed())
    }

    @Test
    @DisplayName("Test config validation with different GCP zones")
    fun testConfigValidationWithDifferentGCPZones() {
        val zones = listOf("us-central1-a", "us-west1-b", "europe-west1-c", "asia-east1-a")

        zones.forEach { zone ->
            val testConfig = ConnectionConfigBuilder()
                .type(ConnectionType.GCP_OS_LOGIN)
                .host("mail-instance")
                .port(22)
                .cloudConfig(CloudConfig(
                    provider = CloudProvider.GCP,
                    project = "mail-production-project",
                    zone = zone,
                    instanceId = "mail-instance"
                ))
                .build()

            val connection = GCPOSLoginConnectionImpl(testConfig)
            val result = connection.validateConfig()
            assertTrue(result.isValid(), "Zone $zone should be valid")
        }
    }

    @Test
    @DisplayName("Test disconnect when not connected")
    fun testDisconnectWhenNotConnected() {
        val connection = GCPOSLoginConnectionImpl(config)

        assertDoesNotThrow {
            connection.disconnect()
        }
    }

    @Test
    @DisplayName("Test close releases resources")
    fun testCloseReleasesResources() {
        val connection = GCPOSLoginConnectionImpl(config)

        assertDoesNotThrow {
            connection.close()
        }

        assertFalse(connection.isConnected())
    }

    @Test
    @DisplayName("Test metadata display name")
    fun testMetadataDisplayName() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("mail-instance (mail-production-project/us-central1-a)", metadata.displayName)
    }

    @Test
    @DisplayName("Test metadata properties contain protocol")
    fun testMetadataPropertiesContainProtocol() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        assertEquals("GCP OS Login", metadata.properties["protocol"])
    }

    @Test
    @DisplayName("Test metadata to map conversion")
    fun testMetadataToMapConversion() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()
        val map = metadata.toMap()

        assertEquals("GCP_OS_LOGIN", map["type"])
        assertEquals("mail-instance", map["host"])
        assertEquals("22", map["port"])
        assertEquals("mail-production-project", map["project"])
        assertEquals("us-central1-a", map["zone"])
    }

    @Test
    @DisplayName("Test GCP OS Login info extraction from metadata")
    fun testGCPOSLoginInfoExtractionFromMetadata() {
        val connection = GCPOSLoginConnectionImpl(config)
        val metadata = connection.getMetadata()

        // Should contain GCP OS Login-related properties
        assertTrue(metadata.properties.containsKey("project"))
        assertTrue(metadata.properties.containsKey("zone"))
        assertTrue(metadata.properties.containsKey("instanceId"))
        assertTrue(metadata.properties.containsKey("serviceAccount"))
        assertTrue(metadata.properties.containsKey("cloudProvider"))
        assertTrue(metadata.properties.containsKey("authMethod"))
        assertTrue(metadata.properties.containsKey("protocol"))
    }
}
